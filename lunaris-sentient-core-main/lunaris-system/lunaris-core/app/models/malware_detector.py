from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score
import shap

class MalwareDetector:
    def __init__(self, input_shape):
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)
        self.svm_model = SVC(probability=True, random_state=42)
        self.gbm_model = GradientBoostingClassifier(random_state=42)
        self.explainer = None

    def train(self, X_train, y_train):
        X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)
        
        # Hyperparameter tuning for RandomForest
        param_grid = {
            'n_estimators': [100, 200, 300],
            'max_depth': [None, 10, 20, 30],
            'min_samples_split': [2, 5, 10]
        }
        grid_search = GridSearchCV(self.model, param_grid, cv=3, scoring='accuracy')
        grid_search.fit(X_train, y_train)
        self.model = grid_search.best_estimator_

        self.svm_model.fit(X_train, y_train)
        self.gbm_model.fit(X_train, y_train)
        self.explainer = shap.TreeExplainer(self.model)
        
        y_pred = self.model.predict(X_val)
        y_svm_pred = self.svm_model.predict(X_val)
        y_gbm_pred = self.gbm_model.predict(X_val)
        
        accuracy = accuracy_score(y_val, y_pred)
        svm_accuracy = accuracy_score(y_val, y_svm_pred)
        gbm_accuracy = accuracy_score(y_val, y_gbm_pred)
        
        print(f"Random Forest Accuracy: {accuracy}")
        print(f"SVM Accuracy: {svm_accuracy}")
        print(f"GBM Accuracy: {gbm_accuracy}")

    def predict(self, X):
        rf_pred = self.model.predict_proba(X)[:, 1]
        svm_pred = self.svm_model.predict_proba(X)[:, 1]
        gbm_pred = self.gbm_model.predict_proba(X)[:, 1]
        combined_pred = (rf_pred + svm_pred + gbm_pred) / 3
        return combined_pred

    def explain_prediction(self, X):
        shap_values = self.explainer.shap_values(X)
        return shap_values