from flask import Blueprint, request, jsonify, render_template
from app.services.malware_service import MalwareService
from app.utils.encryption import Encryption
import logging
import numpy as np
from tqdm import tqdm

bp = Blueprint('malware', __name__, template_folder='../templates')

# Adjust the input shape to match the training data
input_shape = (10,)  # Adjust as necessary
encryption = Encryption("_secret_key_here")
malware_service = MalwareService(input_shape)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@bp.route("/upload_page", methods=["GET"])
def upload_page():
    """
    Renders the upload page.
    """
    logger.info("Rendering the upload page")
    return render_template("upload_page.html")

@bp.route("/upload_malware", methods=["POST"])
def upload_malware():
    """
    Handles the upload of a malware file.
    """
    logger.info("Receiving file for training")
    file = request.files['file']
    label = int(request.form['label'])
    malware_service.process_file(file, label)
    return jsonify({"message": "File uploaded and processed successfully"})

@bp.route("/scan_file", methods=["POST"])
def scan_file():
    """
    Handles the upload of a file for scanning.
    """
    logger.info("Receiving file for scanning")
    if 'file' not in request.files:
        logger.error("No file found in the request")
        return jsonify({"error": "No file found in the request"}), 400

    file = request.files['file']
    filedata = file.read()
    prediction = malware_service.scan_malware(filedata)
    return jsonify({"prediction": prediction})

@bp.route("/train_malware", methods=["POST"])
def train_malware():
    """
    Handles the request to train the model.
    """
    logger.info("Training the model manually")
    for _ in tqdm(range(1), desc="Training the model"):
        malware_service.train_model()
    return jsonify({"message": "Model trained successfully"})