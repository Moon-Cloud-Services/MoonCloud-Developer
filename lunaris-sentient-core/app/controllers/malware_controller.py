from flask import Blueprint, request, jsonify, render_template
from app.services.malware_service import MalwareService
from app.utils.encryption import Encryption
import logging
import json

bp = Blueprint('malware', __name__)

input_shape = (3,)  # Adjust as needed
encryption = Encryption("your_secret_key_here")
malware_service = MalwareService(input_shape)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@bp.route("/upload_page", methods=["GET"])
def upload_page():
    return render_template('upload.html')

@bp.route("/train_malware", methods=["POST"])
def train():
    files = request.files.getlist('files')
    labels = request.form.get('labels').split(',')
    for file, label in zip(files, labels):
        file_content = file.read()
        label = label.strip()
        if label:  # If the label is not empty
            label = int(label) 
            malware_service.add_training_data(file_content, label)
    malware_service.train_model()
    return jsonify({"message": "Successfully trained model"}), 200

@bp.route("/upload_malware", methods=["POST"])
def upload_malware():
    logger.info("Receiving file for malware detection")
    if 'file' not in request.files:
        logger.error("No files found in the request")
        return jsonify({"error": "No file part"}), 400
    file = request.files['file']
    if file.filename == '':
        logger.error("No files selected")
        return jsonify({"error": "No selected file"}), 400
    if not file.filename.endswith(('.csv', '.json', '.exe')):
        logger.error("Invalid file type")
        return jsonify({"error": "Invalid file type. Only CSV, JSON, and EXE are allowed."}), 400
    file_content = file.read()
    try:
        result = malware_service.scan_malware(file_content)
        logger.info("Detection Result: %s", result)
        return jsonify(result)
    except ValueError as e:
        logger.error("Error processing the file: %s", str(e))
        return jsonify({"error": str(e)}), 400

def generate_report(result):
    report = {
        "analysis": result,
        "details": "Complete analysis of the data sent."
    }
    return json.dumps(report, indent=4)
